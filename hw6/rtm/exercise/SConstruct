 # GPGN 658 - reverse-time migration
from rsf.proj import *
import fdm
# ------------------------------------------------------------
par = dict(
    nt=1500, ot=0, dt=0.001, lt='t', ut='s',     
    nx=601,  ox=0, dx=0.005, lx='x', ux='km',
    nz=201,  oz=0, dz=0.005, lz='z', uz='km',
    kt=50,nb=100,jsnap=50,jdata=1,frq=35
    )
fdm.param(par)

par['xk']=50
par['xl']=par['nx']-50

par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']

# ------------------------------------------------------------
# wavelet
fdm.wavelet('wav_',par['frq'],par)
Flow(  'wav', 'wav_','transp')
Result('wav','window n2=500 |' + fdm.waveplot('',par))

# ------------------------------------------------------------
# sources coordinates
fdm.point('ss',par['xsou'],par['zsou'],par) 
Plot('ss',fdm.ssplot('',par))

# receivers coordinates
fdm.horizontal('rr',0,par) 
Plot('rr',fdm.rrplot('',par))

# ------------------------------------------------------------
# velocity
Flow('vo',None,
     '''
     math output="2.0+0.25*x1"
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g
     ''' % par)

Plot(  'vo',fdm.cgrey('allpos=y bias=2.0 pclip=100',par))
Result('vo',['vo','ss','rr'],'Overlay')

# ------------------------------------------------------------
# density
Flow('ra',None,
     '''
     spike nsp=2 mag=+0.5,-0.5
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=101,151 l1=%(nz)d,%(nz)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=1,201   l2=200,%(nx)d |
     add add=2
     ''' % par)
Plot(  'ra',fdm.cgrey('allpos=y bias=1.5 pclip=100',par))
Result('ra',['ra','ss','rr'],'Overlay')

Flow('rb','ra','math output=1')

# ------------------------------------------------------------
# edge taper
Flow('taper',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=50
     ''' % par)
Result('taper','transp |'+fdm.dgrey('pclip=99',par))

# ------------------------------------------------------------
# finite-differences modeling
fdm.awefd('dd','ww','wav','vo','ra','ss','rr','jsnap=1 fsrf=n',par)
fdm.awefd('do','wo','wav','vo','rb','ss','rr','jsnap=1 fsrf=n',par)

Result('ww','window j3=%(jsnap)d |'%par + fdm.wgrey('pclip=99.9',par))
Result('wo','window j3=%(jsnap)d |'%par + fdm.wgrey('pclip=99.9',par))

# data w/  direct arrivals
Flow(  'dr0','dd taper',
       'add mode=p ${SOURCES[1]}')

# data w/o direct arrivals
Flow(  'dr1','dd do taper',
       'math r=${SOURCES[0]} d=${SOURCES[1]} t=${SOURCES[2]} output="(r-d)*t"')

for j in range(2):
    dtag="%d"%j
    Result('dr'+dtag,'transp |' + fdm.dgrey('pclip=99.9',par))

# ------------------------------------------------------------
# Reverse-time migration
imags = ['imag0','imag1']
odats = ['odat0','odat1']
tdats = ['tdat0','tdat1']
twfls = ['twfl0','twfl1']
rwfls = ['rwfl0','rwfl1']
velo,sou,rec,custom='vo','rr','rr','jsnap=1 fsrf=n'
ics,dens,swfls,idats = ['ic0','ic1'],['ra','rb'],['ww','wo'],['dr0','dr1']
# two implementations of conventional (cross-correlation zero-lag) IC
method1 = 'xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100'
method2 = 'sfadd mode=m ${SOURCES[1]} | sfstack axis=3 ${SOURCES[1]}'
for den in dens:
  for i in range(2):
    Flow(odats[i]+den,idats[i],'reverse which=2 opt=i verb=y')
    fdm.awefd(tdats[i]+den,twfls[i]+den,odats[i]+den,velo,den,sou,rec,custom,par)
    Flow(rwfls[i]+den,twfls[i]+den,'reverse which=4 opt=i verb=y')
    output = imags[i]+den
    inputs = [rwfls[i]+den,swfls[i]]
    for ic in ics:
      if ic=='ic0':
        Flow(output+ic,inputs,method1)
      if ic=='ic1':
        Flow(output+ic,inputs,method2)
      Result(output+ic,'window j3=%(jsnap)d |'%par + fdm.wgrey('pclip=99.9',par))
# ------------------------------------------------------------
End()
